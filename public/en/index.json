[{"categories":null,"contents":" Jetson Nano Module\nThis post is about a project I developed while working at Tryolabs. It was a collaboration with BDTI and led to a talk at NVIDIA\u0026rsquo;s GTC that we delivered together with Evan Juras, the hardware engineer.\nIt\u0026rsquo;s a very interesting project from a technical standpoint, since building a real-time computer vision system on a constrained embedded device is challenging. Achieving high performance while juggling multiple simultaneous tasks requires a creative blend of technologies. For this project, Python and NVIDIA DeepStream came together to create an efficient, scalable solution that balances the simplicity of a high-level language with the raw power of GPU-accelerated processing.\nThe result is a full-fledged video pipeline capable of object detection, tracking, video streaming, storage management, and remote control—all running in harmony on a compact embedded device. Here’s how it works.\nChallenge NVIDIA\u0026rsquo;s Jetson Nano, while affordable and accessible (USD 90 at the time), is constrained in terms of memory (4GB of RAM) and CPU resources. Developing a system capable of handling multiple tasks—including computer vision, streaming, and storage management—requires efficient memory management, GPU processing, and robust orchestration of parallel processes.\nPure Python solutions fall short here: •\tThe Global Interpreter Lock (GIL) limits true multithreading. •\tMultiprocessing requires inter-process communication, which can add significant overhead. •\tHandling raw video frames often involves costly memory copies between GPU and RAM.\nOn the flip side, writing the entire pipeline in C++ would be time-intensive and inflexible. To bridge this gap, we combined Python’s development speed with C++’s performance through NVIDIA DeepStream’s Python bindings.\nSolution DeepStream serves as the backbone of the pipeline, handling video processing and object detection using highly optimized GPU-accelerated modules. The pipeline was defined in Python, but all the heavy lifting—frame decoding, inference, and metadata generation—happens in DeepStream’s C++-optimized core.\nBut also, I was working at Tryolabs at the time, and we had our standout tracker library Norfair which is entirely written in Python. Naturally, we wanted to use it—not only because it’s awesome but also because we had deep expertise in its inner workings and personally knew every Kalman Filter involved.\nThis was an interesting challenge, because we needed real-time access to the detections but without access to the video frames, which were deep down flowing through the GPU. And even more, then we needed to draw the bounding boxes of the smoothed tracker detections back in the frame.\nLong story short, we were able to solve this by probing the video pipeline after the object detection model, in order to access the detections metadata. This allowed us to extract the object coordinates from Python and feed them into our Norfair tracker. Then, we had to draw the tracker objects into the frame, by using Deepstream\u0026rsquo;s drawing component, which basically receives a series of commands to draw different shapes into the video frames (e.g: rectangles, circles, text). This allows manipulation of those frames but without manipulating \u0026ldquo;pixels\u0026rdquo; from python, which would require costly memory transfers between GPU and device RAM.\nIn summary, this allowed us to: 1.\tRun an object tracker (Norfair) entirely in Python, using only the metadata (e.g., object coordinates) from the DeepStream pipeline. 2.\tAvoid costly memory transfers by never copying video frames back to RAM.\nNot only Computer Vision The complete system didn\u0026rsquo;t only need to run the object detection and tracker system. We had to run 5 different Python processes in order to meet all the required features for our smart camera.\nSo we used Python multiprocessing to orchestrate these processes:\n1.\tDeepStream Pipeline + Object Tracker: Runs object detection, tracks objects with Norfair, and generates metadata. 2.\tStreaming Server: Streams live video with drawn detections to remote users. 3.\tVideo chunks saver: Saves video segments to a RAM filesystem for temporary storage, with the option to copy segments to disk on alert or remote command. 4.\tStatic Web Server: Allows remote users to download saved video chunks as MP4 files. 5.\tOrchestrator: Coordinates the above processes, communicates with a remote MQTT server for statistics and command handling, and ensures seamless operation. By delegating tasks to separate processes, the system achieved high performance while maintaining the flexibility of Python. Each process could be enabled, disabled, or restarted independently, enabling robust system behavior and faster development cycle.\nResults In just four months, this approach enabled the creation of a real-time computer vision system capable of: •\tDetecting and tracking objects on live video. •\tStreaming video with overlays to remote users. •\tSaving and managing video chunks efficiently. •\tProviding a web interface for downloading videos. •\tSeamlessly integrating with a remote MQTT server for commands and monitoring.\nThis project highlights the power of combining Python and C++. Python’s high-level simplicity enabled fast development and orchestration, while C++ (via DeepStream) ensured the high performance needed for video processing. Developing this system in pure C++ would have been a monumental task, especially with just one full-time engineer and a tight four-month deadline.\nInstead, this hybrid approach delivered: • Faster development: Writing orchestration logic in Python is orders of magnitude faster than C++. • High performance: DeepStream’s optimized C++ backend handled the most resource-intensive operations efficiently. • Resource efficiency: By using metadata and GPU, we avoided bottlenecks like memory copies or pickling. • Flexibility: Running a Python tracker on top of a low-level inference engine for object detection.\nLearn More For a deeper dive into the technical details and to see the full system architecture (with beautiful diagrams!), check out the original Tryolabs blogpost here. You can also explore the complete codebase on the GitHub repository.\nThis project is a testament to the power of combining Python’s flexibility with C++’s performance. It proves that even with constrained hardware, it’s possible to achieve high performance and scalability—without sacrificing development speed.\n","permalink":"http://localhost:1313/en/posts/maskcam/","tags":null,"title":"Python and C++ ❤️ (I): Embedded Computer Vision and Tracking"},{"categories":["archives"],"contents":"Feel free to reach out!\nEmail: braulioriosf@gmail.com LinkedIn: linkedin.com/in/braulio-rios GitHub: github.com/DonBraulio ","permalink":"http://localhost:1313/en/page/contact/","tags":null,"title":"Contact"}]